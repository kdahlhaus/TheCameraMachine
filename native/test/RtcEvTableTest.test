// STL includes
#include <vector>
#include <string>

// C includes

// Framework includes
#include <cxxtest/TestSuite.h>

// Library includes
#include <AnyRtc.h>
#include <Updater.h>
#include <Connector.h>

// Project includes
#include <RtcEvTable.h>
#include <Globals.h>

using namespace std;

extern "C" void mock_time_reset(void);

static RtcEvTable::evline events[] = {
  //YY,MM,DD HH MM SS,CH, signal
  { 11,12, 1, 0, 0, 0, 0, 1 },
  { 11,12, 1, 0, 0, 2, 0, 2 },
  { 11,12, 1, 0, 0, 6, 0, 3 },
  { 11,12, 1, 0, 0, 7, 0, 4 },
};

static RtcEvTable::evline sequence_events[] = {
  //YY,MM,DD HH MM SS,CH, signal
  {  0, 0, 0, 0, 0, 0, 0, 5 },
  {  0, 0, 0, 0, 0, 2, 0, 6 },
  {  0, 0, 0, 0, 0, 6, 0, 7 },
  {  0, 0, 0, 0, 0, 7, 0, 8 },
};
int num_sequence_events = sizeof(sequence_events)/sizeof(RtcEvTable::evline);

class RtcEvTableTestSuite: public CxxTest::TestSuite
{
  static const uint8_t signal_go = 1;
  
  struct listener: public Connectable
  {
    int fired;
    listener(Connector& _conn): Connectable(_conn), fired(0) {}
    void onNotify(const Connectable*, uint8_t /*signal*/)
    {
      ++fired;
    }
  };
  
  RtcEvTable* pRtcEvTable;  
  SignalEvTable* pSignalEvTable;  
  Updater* pUpdater;
  Connector* pConnector;
  listener* plisten;
  uint32_t timeval;
public:
  void setUp()
  {
    mock_time_reset();

    pUpdater = new Updater();
    pConnector = new Connector();
    pRtcEvTable = NULL;
    pSignalEvTable = NULL;
    plisten = new listener(*pConnector);

    RTC.begin();
  }

  void tearDown( void )
  {
    delete plisten;
    if ( pRtcEvTable )
      delete pRtcEvTable;
    if ( pSignalEvTable )
      delete pSignalEvTable;
    delete pConnector;
    delete pUpdater;
    theLogger.setVerbose(false);
  }

  void testEmpty( void )
  {
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    TS_ASSERT(pRtcEvTable);
  }
  void testSeqEmpty( void )
  {
    pSignalEvTable = new SignalEvTable(*pConnector,1,sequence_events,num_sequence_events);
    TS_ASSERT(pSignalEvTable);
  }

  void testUpdate( void )
  {
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    pUpdater->add(pRtcEvTable);
  }
  
  void testFires( void )
  {
    setup_events();

    plisten->listen(pRtcEvTable->channel(0),/*signal*/ 1);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
  }
  void setup_events( void )
  {
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    timeval = pRtcEvTable->whenNext() - 1;
    RTC.adjust(timeval);
    pRtcEvTable->begin();
    pUpdater->add(pRtcEvTable);
  }
  void setup_sequence( void )
  {
    pSignalEvTable = new SignalEvTable(*pConnector,1,sequence_events,num_sequence_events);
    pSignalEvTable->listen(pRtcEvTable->channel(0));
    pSignalEvTable->begin();
    pUpdater->add(pSignalEvTable);
  }
  void testSeqFires( void )
  {
    setup_events();
    setup_sequence();

    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 5);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
  }
  void testSeqReset( void )
  {
    setup_events();
    setup_sequence();

    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 5);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);

    pSignalEvTable->invalidate();
    RTC.adjust(timeval+3);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
  }
  void testSeqFiresAll( void )
  {
    setup_events();
    setup_sequence();

    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 5);
    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 6);
    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 7);
    plisten->listen(pSignalEvTable->channel(0),/*signal*/ 8);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
    RTC.adjust(timeval+3);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,2);
    RTC.adjust(timeval+7);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,3);
    RTC.adjust(timeval+8);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,4);
    RTC.adjust(timeval+20);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,4);
  }
  void testIsValid(void)
  {
    setup_events();

    TS_ASSERT( pRtcEvTable->is_valid() );
  }
  void testIsNotValid(void)
  {
    setup_events();
    pRtcEvTable->invalidate();

    TS_ASSERT( ! pRtcEvTable->is_valid() );
  }
  void testDoesntFireOld( void )
  {
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    uint32_t timeval = pRtcEvTable->whenNext() + 1;
    RTC.adjust(timeval);
    pRtcEvTable->begin();
    pUpdater->add(pRtcEvTable);

    plisten->listen(pRtcEvTable->channel(0),/*signal*/ 1);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,0);
  }
  void testFiresSecond( void )
  {
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    uint32_t timeval = pRtcEvTable->whenNext() + 1;
    RTC.adjust(timeval);
    pRtcEvTable->begin();
    pUpdater->add(pRtcEvTable);
    plisten->listen(pRtcEvTable->channel(0),/*signal*/ 2);
   
    timeval = pRtcEvTable->whenNext() - 1;
    RTC.adjust(timeval);
    pUpdater->update();
    RTC.adjust(timeval+2);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,1);
  }
  void testDoesntFireCh1( void )
  {
    // Same as testFires, only listen to channel 1, so it should NOT fire.
    pRtcEvTable = new RtcEvTable(*pConnector,events,4,2); // 2 channels!!
    uint32_t timeval = pRtcEvTable->whenNext() - 1;
    RTC.adjust(timeval);
    pRtcEvTable->begin();
    pUpdater->add(pRtcEvTable);
    plisten->listen(pRtcEvTable->channel(1),/*signal*/ 1);
   
    RTC.adjust(timeval+2);
    pUpdater->update();
    TS_ASSERT_EQUALS(plisten->fired,0);
  }
  void testAllEventsInPast( void )
  {
    uint32_t future = DateTime(2030,1,1,0,0,0).unixtime();
    RTC.adjust(future);
    
    pRtcEvTable = new RtcEvTable(*pConnector,events,4);
    pRtcEvTable->begin();

    TS_ASSERT( ! pRtcEvTable->is_valid() );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
