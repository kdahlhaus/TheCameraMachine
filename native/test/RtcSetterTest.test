// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>
#include <RtcEvent.h> // for IRtc
#include <Updater.h>

// Project includes
#include <RtcSetter.h>
#include <Globals.h>

#include <Arduino.h>
#include <RTClib.h>

using namespace std;

class RtcSetterTestSuite: public CxxTest::TestSuite
{
  struct TestRtc: public IRtc
  {
    uint32_t now;
    TestRtc(void): now(0) {}
    virtual bool is_after(uint32_t _time) const { return now > _time; }
    virtual void adjust(uint32_t _time) { now = _time; }
  };

  static const int setter_pin = 10;

  Updater* pup;
  TestRtc* prtc;
  RtcSetter* psetter;

public:
  void setUp()
  {
    pup = new Updater;
    prtc = new TestRtc;
    psetter = new RtcSetter(prtc,setter_pin);

    psetter->begin();
    pup->add(psetter);
  }

  void tearDown()
  {
    delete psetter;
    delete prtc;
    delete pup;
  }

  void testEmpty( void )
  {
    TS_ASSERT(psetter);
  }
  
  void testDirectSet( void )
  {
    thePins.hwSetDigital(setter_pin,LOW);
    theSerialBuffer.setInput("Nov 01 2011 22:15:57\n");
    psetter->update();
    TS_ASSERT_EQUALS( prtc->now, DateTime("Nov 01 2011","22:15:57").unixtime() );
  }
  void testDirectSetNoPin( void )
  {
    theSerialBuffer.setInput("Nov 01 2011 22:15:57\n");
    psetter->update();
    TS_ASSERT_EQUALS( prtc->now, 0U );
  }
  void testSetViaUpdater( void )
  {
    thePins.hwSetDigital(setter_pin,LOW);
    theSerialBuffer.setInput("Nov 01 2011 22:15:57\n");
    pup->update();
    TS_ASSERT_EQUALS( prtc->now, DateTime("Nov 01 2011","22:15:57").unixtime() );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
