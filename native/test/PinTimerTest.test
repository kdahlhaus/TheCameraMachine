/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

// STL headers
#include <vector>
#include <string>
#include <iostream>
// C headers
// Framework headers
#include <Pins.h>
// Library headers
#include <cxxtest/TestSuite.h>
#include <Connector.h>
// Project headers
// This component's header
#include <PinTimer.h>

using namespace std;

extern Pins thePins;

class PinTimerTestSuite: public CxxTest::TestSuite
{
  struct Sender: public Connectable
  {
    void send(uint8_t _signal)
    {
      emit(_signal);
    }
    Sender(Connector& _conn): Connectable(_conn) {}
  };

  Connector* pConnector;
  PinTimer* pPinTimer;
  
  static const int pin = 1;
  static const int signal_low = 2;
  static const int signal_high = 3;
  static const unsigned long duration = 500;
  
public:
  void setUp()
  {
    thePins.clear();

    pConnector = new Connector;
    pPinTimer = new PinTimer(*pConnector,pin,signal_low,signal_high,duration);
    pPinTimer->listen(NULL);
  }
  
  void tearDown()
  {
    delete pPinTimer;
    delete pConnector;
  }

  void testEmpty( void )
  {
    TS_ASSERT(pPinTimer);
  }

  void testStartsLow( void )
  {
    TS_ASSERT(!thePins.hwGetDigital(pin));
  }
  void testGoesHigh( void )
  {
    Sender(*pConnector).send(signal_high);

    TS_ASSERT(thePins.hwGetDigital(pin));
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
