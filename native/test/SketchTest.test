// STL includes
#include <vector>
#include <string>
#include <iostream>
#include <iterator>

// C includes

// Framework includes
#include <AnyRtc.h>

// Library includes
#include <cxxtest/TestSuite.h>

// Project includes
#include <Globals.h>
#include <hardware.h>
#include <objects.h>
#include <events.h>

using namespace std;

extern ostream& operator<<(ostream& os, const Logger& log);

class SketchTestSuite: public CxxTest::TestSuite
{
public:
  void setUp()
  {
    thePins.clear();
    theLogger.clear();
    theEeprom.clear();
  }

  // ARRGH..  There can only be ONE test case that tests setup, because all of
  // the statics are not reinitialized.

  void todo_testEmpty( void )
  {
    setup();
    TS_ASSERT(thePins.hwGetDigital(test_switch_pin));
    TS_ASSERT(thePins.hwGetDigital(record_button_pin));
    TS_ASSERT(!thePins.hwGetDigital(power_led_pin));
    TS_ASSERT(!thePins.hwGetDigital(power_relay_pin));
    TS_ASSERT(!thePins.hwGetDigital(record_led_pin));
    TS_ASSERT(!thePins.hwGetDigital(alt_relay_pin));
  }

  void todo_testTestSwitch( void )
  {
    setup();
    thePins.hwSetDigital(test_switch_pin,LOW);
    loop();
    delay(50);
    loop();

    TS_ASSERT(thePins.hwGetDigital(power_led_pin));
    TS_ASSERT(thePins.hwGetDigital(power_relay_pin));
  }
  void todo_testRecordButton( void )
  {
    setup();
    thePins.hwSetDigital(record_button_pin,LOW);
    loop();
    delay(50);
    loop();

    TS_ASSERT(thePins.hwGetDigital(record_led_pin));
  }
  void todo_testAltRelay(void)
  {
    // Create my own emitter here to emit signal_alt_relay_on,
    // and then test the pin
  }

  void testEmpty(void)
  {
  }

  void todo_testRtcEvent0(void)
  {
    // This has to be synced up with the actual first event :|
    uint32_t now = events.whenNext() - 1;
    RTC.adjust(now);
    setup();
    printf_P("************************* Setup done");
    printf_P("loop()");
    loop();
    now += 2;
    RTC.adjust(now);
    printf_P("loop()");
    loop();
    printf_P("loop()");
    loop();
    printf_P("loop()");
    loop();
    printf_P("loop()");
    loop();
    cerr << theLogger;
    TS_ASSERT(thePins.hwGetDigital(power_led_pin));
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
