/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

// STL includes
#include <vector>
#include <string>
#include <iostream>
// C includes

// Framework includes
#include <cxxtest/TestSuite.h>

// Library includes
#include <Updater.h>
#include <AnyRtc.h>

// Project includes
#include <Globals.h>
#include <objects.h>
#include <SerialLineIn.h>

using namespace std;

extern ostream& operator<<(ostream& os, const Logger& log);

class SerialLineInTestSuite: public CxxTest::TestSuite
{
  Updater* pUpdater;
  SerialLineIn* pSerialLineIn ;
public:
  void setUp()
  {
    pUpdater = new Updater;
    pSerialLineIn = new SerialLineIn;
    pUpdater->add(pSerialLineIn);
    theLogger.clear();
  }
  
  void tearDown()
  {
    delete pSerialLineIn;
    delete pUpdater;
  }

  void testEmpty( void )
  {
    TS_ASSERT(pSerialLineIn);
  }
  void testSetTime( void )
  {
    theSerialBuffer.setInput("D111101\nT010203\n");
    pSerialLineIn->update();
    //cerr << theLogger;
    TS_ASSERT_EQUALS( RTC.now(), DateTime("Nov 01 2011","01:02:03").unixtime() );
  }
  void testEepromPlay( void )
  {
    logger.begin();
    logger.clear();
    theSerialBuffer.setInput("E\n");
    pSerialLineIn->update();
    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("BEGIN"), 1 );
    TS_ASSERT_EQUALS( theLogger.lines_contain("END"), 1 );
  }
  void testFreeMemory( void )
  {
    theSerialBuffer.setInput("F\n");
    pSerialLineIn->update();
    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("FREE"), 1 );
  }
  void testNotFound( void )
  {
    theSerialBuffer.setInput("\001\n");
    pSerialLineIn->update();
    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("not found"), 1 );
  }

  //
  // Upcoming features
  //
  void todo_testEmitSignal( void )
  {
    theSerialBuffer.setInput("Ssignal_power_on\n");
  }
  void todo_testEmitAsObject( void )
  {
    theSerialBuffer.setInput("Opower_button signal_power_on\n");
  }
  void todo_testCameraConfig( void )
  {
    // Set camera profile 1
    theSerialBuffer.setInput("C1\n");

    // And then test the difference
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
