/*
 Copyright (C) 2011 J. Coliz <maniacbug@ymail.com>

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 version 2 as published by the Free Software Foundation.
 */

// STL includes
#include <vector>
#include <string>
#include <iterator>
#include <iostream>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>
#include <Logger.h>

// Project includes
#include <Globals.h>
#include <EepromLogger.h>

using namespace std;

ostream& operator<<(ostream& os, const Logger& log)
{
  copy(log.begin(),log.end(),ostream_iterator<string>(os," "));
  return os;
}

class EepromLoggerTestSuite: public CxxTest::TestSuite
{
  struct EepromLogger_test: public EepromLogger
  {
    void test_log_emit(const Connectable* object, uint8_t signal)
    {
      EepromLogger::log_emit(object,signal);
    }
    void test_log_notify(const Connectable* object)
    {
      EepromLogger::log_notify(object);
    }
  };

  struct Sender: public Connectable
  {
    void send(uint8_t signal)
    {
      emit(signal);
    }
    Sender(Connector& _conn): Connectable(_conn) {}
  };
    
  static const int test_signal = 1;
  
  Connector* pconn;
  Sender* pSender;
  EepromLogger_test* pEepromLogger ;
public:
  void setUp()
  {
    theLogger.clear();
    theEeprom.clear();

    pconn = new Connector;
    pSender = new Sender(*pconn);
    pEepromLogger = new EepromLogger_test();

    pEepromLogger->begin();
  }
  
  void tearDown()
  {
    delete pEepromLogger;
    delete pSender;
    delete pconn;
  }

  void testEmpty( void )
  {
    TS_ASSERT(pEepromLogger);
  }

  void testReplay( void )
  {
    pEepromLogger->play();
    
    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("LOG  BEGIN"), 1 );
    TS_ASSERT_EQUALS( theLogger.lines_contain("LOG  END"), 1 );
  }
  void testEmit( void )
  {
    pEepromLogger->setSymbol( test_signal, "test_signal" );
    pEepromLogger->setSymbol( pSender, "test_sender" );
    pEepromLogger->test_log_emit( pSender, test_signal );
    
    pEepromLogger->play();

    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("EMIT test_sender test_signal"), 2 );
  }
  void testNotify( void )
  {
    pEepromLogger->setSymbol( pSender, "test_sender" );
    pEepromLogger->test_log_notify( pSender );
    
    pEepromLogger->play();

    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("NOTF test_sender"), 2 );
  }
  void testMultipleRuns( void )
  {
    pEepromLogger->setSymbol( test_signal, "test_signal" );
    pEepromLogger->setSymbol( pSender, "test_sender" );
    pEepromLogger->test_log_emit( pSender, test_signal );
    pEepromLogger->test_log_emit( pSender, test_signal );
    pEepromLogger->test_log_emit( pSender, test_signal );

    delete pEepromLogger;
    pEepromLogger = new EepromLogger_test();
    pEepromLogger->begin();
    pEepromLogger->setSymbol( test_signal, "test_signal" );
    pEepromLogger->setSymbol( pSender, "test_sender" );
   
    theLogger.clear();
    pEepromLogger->play();
 
    //cerr << theLogger;
    TS_ASSERT_EQUALS( theLogger.lines_contain("LOG  BEGIN"), 2 );
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
