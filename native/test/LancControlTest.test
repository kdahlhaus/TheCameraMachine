// STL includes
#include <vector>
#include <string>

// C includes

// Library includes
#include <cxxtest/TestSuite.h>
#include <Connector.h>

// Project includes
#include <signals.h>
#include <LancControl.h>

using namespace std;

class LancControlTestSuite: public CxxTest::TestSuite
{
  struct Sender: public Connectable
  {
    void send(uint8_t _signal)
    {
      emit(_signal);
    }
    Sender(Connector& _conn): Connectable(_conn) {}
  };

  static const int command_pin = 1;
  static const int data_pin = 2;

  Connector* pconn;
  LancControl *plc;
public:
  void setUp()
  {
    pconn = new Connector;
    plc = new LancControl(*pconn,command_pin,data_pin);
    plc->begin();
    plc->listen(NULL);
  }
  void tearDown()
  {
    delete plc;
    delete pconn;
  }

  void testEmpty( void )
  {
    TS_ASSERT(plc);
  }
  void testStableStart( void )
  {
    TS_ASSERT_EQUALS(plc->isRecording(),false);
  }

  void testStartRecord( void )
  {
    Sender(*pconn).send(signal_start_record);

    TS_ASSERT(plc->isRecording());
  }
  void testStopRecord( void )
  {
    Sender(*pconn).send(signal_start_record);

    TS_ASSERT(plc->isRecording());
    
    Sender(*pconn).send(signal_stop_record);
    
    TS_ASSERT(!plc->isRecording());
  }
};
// vim:cin:ai:sts=2 sw=2 ft=cpp
